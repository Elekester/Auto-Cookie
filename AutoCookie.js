/*******************************************************************************
* MIT License
*
* Copyright (c) 2021 Clayton Craig
*  
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
*  
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

/*******************************************************************************
* Header
*******************************************************************************/
var AC = {
    "Auto": {},
    "Cache": {"Auto": {}},
    "Config": {},
    "Data": {},
    "Helper": {},
    "Mod": {},
    "Version": {
		"CC": "2.031",
		"AC": "2021.01.13"
	}
}

/*******************************************************************************
* AC
*
* These functions are used by Cookie Clicker to run the mod
*******************************************************************************/
/*
* This function is called by Cookie Clicker to initialize the mod
*/
AC.init = function() {
    if (Game.prefs.popups) {Game.Popup("Auto Cookie " + AC.Version.CC + "." + Version.AC + " loaded.")} else {Game.Notify("Auto Cookie " + AC.Version.CC + "." + Version.AC + " loaded.", "", "", 1, 1)}
    Game.Win("Third-party");
	
	for (const f in AC.Auto) {
		AC.Cache.Auto[f] = {}
	}
	
	// Wait 500 ms to see if AC.load() was called by Cookie Clicker. If it wasn't call AC.startAutos() and start the mod with default values
	setTimeout(function() {if (!AC.Cache.running) {AC.startAutos()}; AC.Cache.running = true}, 500);
}

/*
* This function returns AC.Config.Current as a stringified JSON as requested by Cookie Clicker
*/
AC.save = function() {
    return JSON.stringify(AC.Config.Current);
}

/*
* This function loads AC.Config.Current from the save data provided by Cookie Clicker
* @param	{str}	saveStr	Setting data in the same format as AC.Config.Default as a stringified JSON
*/
AC.load = function(saveStr) {
    AC.Config.Current = AC.Config.Default;
	
    try {
        AC.Config.Current = JSON.parse(saveStr);
    } catch(err) {
		AC.errorNotify("Failed to load mod save data. ${err}");
    }
	
    AC.startAutos();
	AC.Cache.running = true;
}

/*
* This function sets the intervals that the functions in AC.Auto are called at
*/
AC.startAutos = function() {
	for (const f in AC.Auto) {
		if (typeof AC.Cache.Auto[f].ID !== "undefined") {AC.Cache.Auto[f].ID = clearInterval(AC.Cache.Auto[f].ID)} else {AC.Cache.Auto[f].ID = undefined}
		if (AC.Config.Current.Auto[f].interval != 0) {AC.Cache.Auto[f].ID = setInterval(AC.Auto[f], AC.Config.Current.Auto[f].interval)}
	}
}

/*
* This function notifies the player that an error has occured.
*/
AC.errorNotify = function(errorMessage) {
	if (Game.prefs.popups) {
		Game.Popup("Auto Cookie " + AC.Version.CC + "." + Version.AC + " Error. " + errorMessage)
	} else {
		Game.Notify("Auto Cookie " + AC.Version.CC + "." + Version.AC + " Error", errorMessage)
	}
}

/*******************************************************************************
* AC.Auto
*
* Functions that are called by AC.startAutos() to automatically perform game actions
*
* For each AC.Auto.f, the following data is generated
*	AC.Cache.Auto.f   	{dict}	Generated by AC.init(), stores any local information required by f between calls
*	AC.Cache.Auto.f.ID	{num} 	Generated by AC.startAutos(), stores the ID used by clearInterval() to stop the function from being called
*
* For each AC.Auto.f, unique settings should be stored in the following places as a dictionary
*	AC.Config.Default.Auto.f	{dict}	The default settings
*	AC.Config.Current.Auto.f	{dict}	The current settings
*	AC.Config.Maximum.Auto.f	{dict}	The maximum settings (must be greater than the minimum settings)
*	AC.Config.Minimum.Auto.f	{dict}	The minimum settings (must be less than the maximum settings)
*
* For each AC.Auto.f, the following data is expected
*	AC.Config.Default.Auto.f.interval	{num}	The default interval (in ms) at which to call f. If == 0, f is not called by default
*	AC.Config.Current.Auto.f.interval	{num}	The current interval (in ms) at which to call f. If == 0, f is not called
*	AC.Config.Maximum.Auto.f.interval	{num}	The maximum interval (in ms) at which to call f. If == 0, f is assumed to not be called, but might if the user's save data is old
*	AC.Config.Minimum.Auto.f.interval	{num}	The minimum interval (in ms) at which to call f. If == 0, f is not necessarily called
*******************************************************************************/
/*
* This function clicks the cookie a number of times
*/
AC.Auto.clickCookie = function() {
	for (var i = 0; i < AC.Config.Current.Auto.clickCookie.numClicks; i++) {Game.ClickCookie()}
}

/*******************************************************************************
* AC.Cache
*
* Data that is generated during runtime
*******************************************************************************/
AC.Cache.running = false;

/*******************************************************************************
* AC.Config
*
* Functions and dictionaries that store the confriguration of this mod
*******************************************************************************/
AC.Config.Default = {
	"Auto": {
		"clickCookie": {"interval": 100}
	}
}

AC.Config.Maximum = {
	"Auto": {
		"clickCookie": {"interval": Infinity}
	}
}

AC.Config.Minimum = {
	"Auto": {
		"clickCookie": {"interval": 0}
	}
}

AC.Config.Current = AC.Config.Default;

/*******************************************************************************
* AC.Data
*
* Data that is created before runtime
*******************************************************************************/

/*******************************************************************************
* AC.Lib
*
* Additional functions that aid in other calculations.
*******************************************************************************/

/*******************************************************************************
* Register the mod with Cookie Clicker
*******************************************************************************/
Game.registerMod("AutoCookieBeta", AC);